<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        ">

    <!-- Hibernate4 -->
    <!-- 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
    <context:property-placeholder location="classpath:persistence-mysql.properties" />
    <!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
    <context:component-scan base-package="com.beacon"><!-- base-package 如果多个，用“,”分隔 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <!-- 可以加多个包 -->
                <value>com.beacon.model</value>
                <value>com.beacon.entity</value>
                <value>com.beacon.dao</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=org.hibernate.dialect.MySQLDialect
                <!-- hibernate.show_sql=true-->
                hibernate.format_sql=false
                hibernate.optimistic-lock=all
                hibernate.hbm2ddl.auto=update
            </value>
        </property>
    </bean>

    <!-- 数据库映射 -->
    <!--  class="org.apache.tomcat.dbcp.dbcp.BasicDataSource" -->
    <!--  class="org.springframework.jdbc.datasource.DriverManagerDataSource" -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.pass}" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置Hibernate事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>


    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--expose-proxy属性设置为true，使得代理目标对象的自我调用可以实施切面中的增强
    -->
    <aop:aspectj-autoproxy expose-proxy="true"/>
    <!-- 配置事务异常封装 -->
    <!--<bean id="persistenceExceptionTranslationPostProcessor"
          class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

    &lt;!&ndash;  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager &ndash;&gt;
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <aop:config expose-proxy="true">
        &lt;!&ndash; 只对业务逻辑层实施事务 &ndash;&gt;
        <aop:pointcut id="txPointcut" expression="execution(* com.op.service.DaoService..*.*(..))" />
        &lt;!&ndash; Advisor定义，切入点和通知分别为txPointcut、txAdvice &ndash;&gt;
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>-->


    <bean id="quartzJob" class="com.beacon.utils.ComputeThread"></bean>
    <!-- 定义调用对象和调用对象的方法 -->
    <bean id="jobtask"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 调用的类 -->
        <property name="targetObject">
            <ref bean="quartzJob" />
        </property>
        <!-- 调用类中的方法 -->
        <property name="targetMethod">
            <value>work</value>
        </property>
        <property name="concurrent" value="false"/>
    </bean>
    <!-- 定义触发时间 -->
    <!--<bean id="doTime"-->
    <!--class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
    <!--<property name="jobDetail">-->
    <!--<ref bean="jobtask" />-->
    <!--</property>-->
    <!--&lt;!&ndash; cron表达式 &ndash;&gt;-->
    <!--<property name="cronExpression">-->
    <!--<value>10 0/1 * * * ?</value>-->
    <!--&lt;!&ndash;<value>0/1 * * * * ?</value>&ndash;&gt;-->
    <!--</property>-->
    <!--</bean>-->
    <bean id="doTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="jobtask"/>
        </property>
        <!-- cron表达式 -->
        <property name="cronExpression">
            <value>0 0/1 * * * ?</value>
            <!--<value>0/5 * * * * ?</value>-->
        </property>
        <!--<property name="cronExpression">
            <value>0 */1 * * * ?</value>
        </property>-->
    </bean>

    <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 -->
    <!--<bean id="startQuertz"-->
    <!--class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
    <!--<property name="triggers">-->
    <!--<list>-->
    <!--<ref bean="doTime" />-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <bean id="startQuertz" lazy-init="false" autowire="no"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="doTime" />
            </list>
        </property>
    </bean>

</beans>